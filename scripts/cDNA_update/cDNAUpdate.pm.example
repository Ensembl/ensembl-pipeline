package cDNAUpdate;


# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2024] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



=pod

=head1 NAME

cDNAupdate.pm

=head1 DESCRIPTION

This file contains the necessary configuration for running cDNA_update
for both human and mouse cDNAs. You should read this POD along with
the POD for cDNA_update for an overview of the cDNA_update process.

As in all configurations there is a default section containg all
variables that are required, followed by the individual settings for
human and mouse. Which species to use is set when cDNA_update.pl is
run.

Note that the import subroutine is slightly different to the method
usually used for importing the configurations as the cDNA_update
procedure itself doesn't follow a regular genebuild pipeline.

Some variables are pre-defined in the default section, these should
not require minimal modicifations once they have been set. The user
section will change every time the procedure is run.

=cut
use strict;
use vars qw(%Config);

%Config = (
    DEFAULT => {
        # write-access is required
        DBUSER     => 'ensadmin',
        DBPASS     => '*****', 
        DBUSER_RO  => 'ensro',



        # Path to gss file - contains accs from the GSS (Genome Survey Sequence) division of GenBank 
        GSS_PATH => '/ensembl-personal/genebuilders/cDNA_update/gss_acc.txt', 
        #Only complete if the gss file isn't under ENSCODE_DIR
        #If completed will replace ENSCODE_DIR as prefix to GSS_PATH
        GSS_PREFIX => undef,

        # Various scripts required by the process.
        FASTA_SPLIT             => '/software/ensembl/bin/fastasplit_random',  #path to fastasplit
        POLYA_CLIPPING_PATH     => '/ensembl-pipeline/scripts/EST/new_polyA_clipping.pl',
        FIND_N_PATH             => '/ensembl-pipeline/scripts/cDNA_update/find_N.pl',
        STORE_UNMAPPED_PATH     => '/ensembl-pipeline/scripts/cDNA_update/store_unmapped_cdnas.pl',
        LOAD_TAX_PATH           => '/ensembl-pipeline/scripts/load_taxonomy.pl',
        LOAD_PROD_DB            => '/ensembl-production/scripts/production_database/populate_production_db_tables.pl',
        META_LEVELS_PATH        => '/ensembl/misc-scripts/meta_levels.pl',
        MIN_LENGTH              => 60,  # minimum length of cdna (otherwise they will be ignored ) 

        # Exonerate specifications
        PROGRAM_NAME    => "exonerate",
        PROGRAM_VERSION => "0.9.0",  
        PROGRAM_FILE    => "/software/ensembl/genebuild/usrlocalensemblbin/exonerate-0.9.0",  #path to exonerate
        MODULE_NAME     => "Exonerate2Genes",

        # Source data files details
        REFSEQ_SOURCE => '/data/blastdb/Supported/REFSEQ/species',

        # Taxonomy db for loading meta_table - should not need to change
        TAXONDBNAME => 'ncbi_taxonomy',
        TAXONDBHOST => 'ens-livemirror',
        TAXONDBPORT => 3306,

        # For the comparison only 
        OLD_FEATURE_NAME => 'cdna_update',

        # These variables need to be set, please do so in the
        # corresponding hash tables for the species you want to
        # analyse.

        # User details 
        USER         => "$ENV{USER}" ,
        HOST         => "$ENV{HOST}" , 
        GENEBUILD_ID => undef,
        # When using the run-force option, if you align less than XX% of your cDNA in the first run,
        # it switch back to the normal run mode
        ALIGNMENT_THRESHOLD => 70,


    },

    human => {

        # PIPE_* and OUTPUT_* DBs will be created automatically 
        # REF DB is existing core DB on staging with DNA

        REF_DBNAME => '',      # homo_sapiens_core_56_37a
        REF_DBHOST => '',      # ens-staging 
        REF_DBPORT => 3306, 

        PIPE_DBNAME => '',     # xx_human_cdna_pipeline
        PIPE_DBHOST => '',     # genebuild_x 
        PIPE_DBPORT => 3306,

        OUTPUT_DBNAME => '',   # xx_homo_sapiens_cdna_56_37a
        OUTPUT_DBHOST => '',   # genebuild_x
        OUTPUT_DBPORT => 3306,

        LAST_DBNAME => '',    # last cdna db  : homo_sapiens_cdna_55_37
        LAST_DBHOST => '',    # ensdb-archive [5304] , ens-livemirror[3306] ,ens-staging [ 3306 ] 
        LAST_DBPORT => 3306,
 
        LAST_DNADBNAME => '',  # last core db :  homo_sapiens_core_55_37
        LAST_DNADBHOST => '',
        LAST_DNADBPORT => 3306,

        PRODUCTION_DBNAME => 'ensembl_production',#db to read unmapped reason and external db from
        PRODUCTION_DBHOST => '',
        PRODUCTION_DBPORT => 3306,

        # Select the good DB for the tokens, the first one is the pipeline DB
        RESOURCE => '-R"select[mem>2000] rusage[mem=2000, myens_buildXtok=20:duration=5, myens_buildXtok=20]" -M 2000',#can be used for token requirements, etc.
        BATCH_SIZE => 10,
        RETRY_RESOURCE => '-R"select[mem>4000] rusage[mem=4000, myens_buildXtok=20:duration=5, myens_buildXtok=20]" -M 4000',
        RETRY_BATCH_SIZE => 1,

        ENSCODE_DIR => '',
        DATA_DIR => '',

        # Path to the genomic sequence
        GENOMICSEQS => '/data/blastdb/Ensembl/human/GRCh38/genome/softmasked_dusted/softmasked_dusted.fa',

        # You shouldn't need to change the settings below but do check #
        # that they are correct.                                       #
        ################################################################
        # Chunk size recommendations: 5500 for human
        # otherwise get AWOL jobs in first run
        CHUNK => 5500,

        # Using human sequence
        REFSEQ => 'hs.fna',

        # Species information
        COMMON_SPECIES_NAME => 'human',
        SPECIES             => 'Homo sapiens',
        TAX_ID              => 9606,
    },

    mouse => {

        # PIPE_* and OUTPUT_* DBs will be created automatically 
        # REF DB is existing core DB on staging with DNA

        REF_DBNAME => '',     # mus_musculus_core_50_37c
        REF_DBHOST => '',     # ens-staging 
        REF_DBPORT => 3306,

        PIPE_DBNAME => '',    # xx_mouse_cdna_pipeline
        PIPE_DBHOST => '',    # genebuild_x 
        PIPE_DBPORT => 3306,

        OUTPUT_DBNAME => '',  # xx_mus_musculus_cdna_update
        OUTPUT_DBHOST => '',  # genebuild_y
        OUTPUT_DBPORT => 3306,

        LAST_DBNAME => '',    # mus_musculus_cdna_49_37c
        LAST_DBHOST => '',    # ensdb-archive [5304] , ens-livemirror[3306] ,ens-staging [ 3306 ] 
        LAST_DBPORT => 3306,

        LAST_DNADBNAME => '', # late core db with dna : mus_musculus_core_49_37c 
        LAST_DNADBHOST => '', # ensdb-archive [5304] , ens-livemirror[3306] ,ens-staging [ 3306 ] 
        LAST_DNADBPORT => 3306, 

        PRODUCTION_DBNAME => 'ensembl_production',#db to read unmapped reason and external db from
        PRODUCTION_DBHOST => '',
        PRODUCTION_DBPORT => 3306,

        # Select the good DB for the tokens, the first one is the pipeline DB
        RESOURCE => '-R"select[mem>2000] rusage[mem=2000, myens_buildXtok=20:duration=5, myens_buildYtok=20]" -M 2000',#can be used for token requirements, etc.
        BATCH_SIZE => 10,
        RETRY_RESOURCE => '-R"select[mem>4000] rusage[mem=4000, myens_buildXtok=20:duration=5, myens_buildYtok=20]" -M 4000',
        RETRY_BATCH_SIZE => 1,

        ENSCODE_DIR => '',
        DATA_DIR => '',

        # Path to the genomic sequence
        GENOMICSEQS => '/data/blastdb/Ensembl/Mouse/GRCm38/softmasked_dusted/toplevel.with_nonref_and_grcm38_p1.no_duplicate.softmasked_dusted.fa',

        # You shouldn't need to change the settings below but do check #
        # that they are correct.                                       #
        ################################################################

        # Chunk size recommendations: 1500 for mouse
        # otherwise get AWOL jobs in first run
        CHUNK => 1500,

        # specific sequence file
        REFSEQ         => 'mouse.fna',

        # Species information
        COMMON_SPECIES_NAME => 'mouse',
        SPECIES             => 'Mus musculus',
        TAX_ID              => 10090,
    }
);

sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

  # Get list of variables supplied, or else
  # all of General:
  my @vars = @_ ? @_ : keys( %Config );
  return unless @vars;

  # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
    . join(' ', map { '$'.$_ } @vars) . ")";
    die $@ if $@;

    foreach my $var (@vars) {
        if ( defined $Config{ $var } ) {
            no strict 'refs';
            foreach my $key (keys %{$Config{$var}}) {
            # Exporter does a similar job to the following
            # statement, but for function names, not
            # scalar variables:
                *{"${callpack}::$key"} = \$Config{$var}{$key};
            }
        } else {
            die "Error: Config: $var not known\n";
        }
    }
}

1;

