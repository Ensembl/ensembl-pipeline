#!/usr/local/ensembl/bin/perl  -w 


# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
Copyright [2016-2024] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


=head1 NAME

add_Analysis, handles insertion of analysis objects into the database

=head1 SYNOPSIS

add_Analysis -dbhost -dbport -dbuser -dbpass -dbname -logic_name -module -type

=head1 DESCRIPTION

this script will insert analysis objects into a ensembl core database
with the pipeline tables added on

for the script to work the db files are required as are -logic_name
-module and -input_id_type

=head1 OPTIONS

    -dbhost    host name for database (gets put as host= in locator)

    -dbport    For RDBs, what port to connect to (port= in locator)

    -dbname    For RDBs, what name to connect to (dbname= in locator)

    -dbuser    For RDBs, what username to connect as (dbuser= in locator)

    -dbpass    For RDBs, what password to use (dbpass= in locator)

    -help      Displays script documentation with PERLDOC
  
    -logic_name the logic name of the analysis
    
    -database the name of the analysis database
  
    -database_version the version of the analysis database
   
    -database_file the full path to the database
 
    -program the name of the program being used
 
    -program_version the version of the program

    -module the name of the module, the module should either live in
     Bio::EnsEMBL::Pipeline::RunnableDB or you should provide the full 
     path to the module

    -module_version the version of the module

    -gff_source the source of the data ie RepeatMasker

    -gff_feature the type of feature ie Repeat

    -input_id_type the type of input_id this analysis will take, this should
     be all in uppercase ie CONTIG or SLICE

    
=cut

use Bio::EnsEMBL::Pipeline::Analysis;
use Bio::EnsEMBL::Pipeline::DBSQL::AnalysisAdaptor;
use Bio::EnsEMBL::Pipeline::DBSQL::DBAdaptor;
use Bio::EnsEMBL::Pipeline::Rule; 
use strict;
use Getopt::Long qw(:config no_ignore_case);

my $host;
my $user = '';
my $pass = '';
my $port = 3306;
my $dbname;

my $logic_name;
my $database;
my $database_version;
my $database_file;
my $program;
my $program_file;
my $program_version;
my $parameters;
my $module;
my $module_version;
my $gff_source;
my $gff_feature;
my $input_id_type;
my $help;
my $create_submission_ana ;
my $uppercase; 
GetOptions(
            'dbhost|host|h:s'  => \$host,
            'dbport|port|P:n'  => \$port,
            'dbuser|user|u:s'  => \$user,
            'dbpass|pass|p:s'  => \$pass,
            'dbname|db|D:s'  => \$dbname,
            'logic_name:s' => \$logic_name,
            'database:s'   => \$database,
            'database_version:s' => \$database_version,
            'database_file:s'    => \$database_file,
            'program:s'          => \$program,
            'program_version:s'  => \$program_version,
            'program_file:s'     => \$program_file,
            'parameters:s'       => \$parameters,
            'module:s'           => \$module,
            'module_version:s'   => \$module_version,
            'gff_sources:s'      => \$gff_source,
            'gff_feature:s'      => \$gff_feature,
            'input_id_type:s'       => \$input_id_type,
            'uppercase|uc!'       => \$uppercase,
            'help'            => \$help, 
            'auto|all!'   => \$create_submission_ana ,  # creates a submission analysis automatically and adds rule too 
           );


my $analysis = new Bio::EnsEMBL::Pipeline::Analysis;
if(!$help){
  if (!defined($logic_name)) {
    print STDERR "Analysis must have a logic_name defined\n";
    $help = 1;
  }
  
  if (!defined($module)) {
    print STDERR "Analysis must have a module defined\n";
    $help = 1;
  }
  
  if (!defined($input_id_type)) {
    print STDERR "Analysis must have an input type \n";
    $help = 1;
  }
  
  if(!$host || !$user || !$pass || !$dbname){
    print STDERR "need to give database settings on the commandline\n";
    $help = 1;
  }
}

if ( $uppercase ) {   
  $input_id_type=uc($input_id_type) ; 
} 


if ($help) {
    exec('perldoc', $0);
}

my $db = new Bio::EnsEMBL::Pipeline::DBSQL::DBAdaptor(-host   => $host,
                                                      -user   => $user,
                                                      -pass   => $pass,
                                                      -port   => $port,
                                                      -dbname => $dbname);

if ($logic_name)       {$analysis->logic_name        ($logic_name);}
if ($database  )       {$analysis->db                ($database);}
if ($database_file)    {$analysis->db_file           ($database_file);}
if ($database_version) {$analysis->db_version        ($database_version);}
if ($program)          {$analysis->program           ($program);}
if ($program_file)     {$analysis->program_file      ($program_file);}
if ($module)           {$analysis->module            ($module);}
if ($module_version)   {$analysis->module_version    ($module_version);}
if ($parameters)       {$analysis->parameters        ($parameters);}
if ($program_version)  {$analysis->program_version   ($program_version);}
if ($gff_source)       {$analysis->gff_source        ($gff_source);}
if ($gff_feature)      {$analysis->gff_feature       ($gff_feature);} 
if ($input_id_type)    {$analysis->input_id_type     ($input_id_type);}

$db->get_AnalysisAdaptor->store($analysis); 

if ( defined $create_submission_ana ) {   
  my $submission_logic_name = "Submit_$logic_name";
  my $submit_analysis = Bio::EnsEMBL::Pipeline::Analysis->new ( 
                            -module => "Dummy" , 
                            -logic_name =>$submission_logic_name, 
                            );
  if ($input_id_type) {$submit_analysis->input_id_type($input_id_type);} 
  $db->get_AnalysisAdaptor->store($submit_analysis);  
  print "Submission analyis created : $submission_logic_name \n" ;   
  # create rule   
  my $rule = Bio::EnsEMBL::Pipeline::Rule->new(
                                                -goalanalysis => $analysis,
                                                -adaptor => $db, 
                                              ); 
  $rule->add_condition($submission_logic_name); 
  $db->get_RuleAdaptor->store($rule);  
  print "rule inserted : " . $analysis->logic_name ." ==>  $submission_logic_name \n" ; 
} 


