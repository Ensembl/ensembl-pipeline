package ncRNA_update_config;


# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# Copyright [2016-2024] EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use vars qw(%Config);


%Config = (
	   CONFIG => {
		      HUMAN => {
				  # source db with dna dont want to write to this one
				  DBNAME     => "human_ref_db",
				  DBPORT     => "3306",
				  DBHOST     => "genebuildX",
				  DBTOKEN    => "myens_buildXtok",
				  # DB to write to (Also the pipeline database)
				  WRITENAME  => "ncRNA_db",
				  WRITEPORT  => "3306",
				  WRITEHOST  => "genebuildY",
				  WRITETOKEN => "myens_buildYtok",
				 },	
				 
	             # etc for however many species you want	 				 				 
		     },
           DATADIR   => "/path/to/store/output",
           CVSDIR    => "/path/to/cvs",
           WRITEUSER => "mysql_write_access",
           ROUSER => "mysql_readonly_access",
           BIOPERL_PATH => "/path/to/bioperl",

           MIRBASEVERSION => "18.0",
           RFAMVERSION => "10.1",
           # directory to make the blast databases in
           BLASTDIR    => "path/to/blast/db",
	  );




sub import {
  my ($callpack) = caller(0); # Name of the calling package
  my $pack = shift; # Need to move package off @_

    # Get list of variables supplied, or else all
  my @vars = @_ ? @_ : keys(%Config);
  return unless @vars;

    # Predeclare global variables in calling package
  eval "package $callpack; use vars qw("
       . join(' ', map { '$'.$_ } @vars) . ")";
  die $@ if $@;


    foreach (@vars) {
    if (defined $Config{ $_ }) {
              no strict 'refs';
        # Exporter does a similar job to the following
        # statement, but for function names, not
        # scalar variables:
        *{"${callpack}::$_"} = \$Config{ $_ };
    } else {
        die "Error: Config: $_ not known\n";
    }
  }
}

1;

